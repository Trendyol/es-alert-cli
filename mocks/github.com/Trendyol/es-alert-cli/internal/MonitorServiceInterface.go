// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MonitorServiceInterface is an autogenerated mock type for the MonitorServiceInterface type
type MonitorServiceInterface struct {
	mock.Mock
}

type MonitorServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitorServiceInterface) EXPECT() *MonitorServiceInterface_Expecter {
	return &MonitorServiceInterface_Expecter{mock: &_m.Mock}
}

// Upsert provides a mock function with given fields: filename, deleteUntracked
func (_m *MonitorServiceInterface) Upsert(filename string, deleteUntracked bool) error {
	ret := _m.Called(filename, deleteUntracked)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(filename, deleteUntracked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorServiceInterface_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MonitorServiceInterface_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - filename string
//   - deleteUntracked bool
func (_e *MonitorServiceInterface_Expecter) Upsert(filename interface{}, deleteUntracked interface{}) *MonitorServiceInterface_Upsert_Call {
	return &MonitorServiceInterface_Upsert_Call{Call: _e.mock.On("Upsert", filename, deleteUntracked)}
}

func (_c *MonitorServiceInterface_Upsert_Call) Run(run func(filename string, deleteUntracked bool)) *MonitorServiceInterface_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MonitorServiceInterface_Upsert_Call) Return(_a0 error) *MonitorServiceInterface_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitorServiceInterface_Upsert_Call) RunAndReturn(run func(string, bool) error) *MonitorServiceInterface_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitorServiceInterface creates a new instance of MonitorServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitorServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitorServiceInterface {
	mock := &MonitorServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
