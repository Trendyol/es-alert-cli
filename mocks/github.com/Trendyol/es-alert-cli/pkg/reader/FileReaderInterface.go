// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mapset "github.com/deckarep/golang-set"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Trendyol/es-alert-cli/pkg/model"
)

// FileReaderInterface is an autogenerated mock type for the FileReaderInterface type
type FileReaderInterface struct {
	mock.Mock
}

type FileReaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *FileReaderInterface) EXPECT() *FileReaderInterface_Expecter {
	return &FileReaderInterface_Expecter{mock: &_m.Mock}
}

// ReadLocalYaml provides a mock function with given fields: filename
func (_m *FileReaderInterface) ReadLocalYaml(filename string) (map[string]model.Monitor, mapset.Set, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for ReadLocalYaml")
	}

	var r0 map[string]model.Monitor
	var r1 mapset.Set
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (map[string]model.Monitor, mapset.Set, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]model.Monitor); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.Monitor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) mapset.Set); ok {
		r1 = rf(filename)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(mapset.Set)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(filename)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FileReaderInterface_ReadLocalYaml_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLocalYaml'
type FileReaderInterface_ReadLocalYaml_Call struct {
	*mock.Call
}

// ReadLocalYaml is a helper method to define mock.On call
//   - filename string
func (_e *FileReaderInterface_Expecter) ReadLocalYaml(filename interface{}) *FileReaderInterface_ReadLocalYaml_Call {
	return &FileReaderInterface_ReadLocalYaml_Call{Call: _e.mock.On("ReadLocalYaml", filename)}
}

func (_c *FileReaderInterface_ReadLocalYaml_Call) Run(run func(filename string)) *FileReaderInterface_ReadLocalYaml_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileReaderInterface_ReadLocalYaml_Call) Return(_a0 map[string]model.Monitor, _a1 mapset.Set, _a2 error) *FileReaderInterface_ReadLocalYaml_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FileReaderInterface_ReadLocalYaml_Call) RunAndReturn(run func(string) (map[string]model.Monitor, mapset.Set, error)) *FileReaderInterface_ReadLocalYaml_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileReaderInterface creates a new instance of FileReaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileReaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileReaderInterface {
	mock := &FileReaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
